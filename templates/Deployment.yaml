apiVersion: apps/v1
kind: Deployment
metadata:
  name: p5js-sketches
  namespace: {{ .Values.spec.namespace }}
  labels:
    app: p5js-sketches
spec:
  replicas: {{ .Values.spec.server.replicas }}
  selector:
    matchLabels:
      app: p5js-sketches
  template:
    metadata:
      labels:
        app: p5js-sketches
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/health"
    spec:
      serviceAccountName: p5js-sketches-controller
      securityContext:
        runAsNonRoot: {{ .Values.spec.security.runAsNonRoot }}
        runAsUser: {{ .Values.spec.security.runAsUser }}
        runAsGroup: {{ .Values.spec.security.runAsGroup }}
        fsGroup: {{ .Values.spec.security.runAsGroup }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - p5js-sketches
              topologyKey: kubernetes.io/hostname
      initContainers:
      # Sketch sync init container - syncs sketches at startup
      - name: sketch-sync
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Syncing registered sketches..."
          echo "kubectl version:"
          kubectl version --client
          echo "Checking for jq:"
          which jq || echo "jq not found"
          
          # Get all registration ConfigMaps using kubectl
          kubectl get configmaps -n {{ .Values.spec.namespace }} \
            -l p5js-sketch/registration=true \
            -o json | jq -r '.items[] | 
              "\(.metadata.name)|\(.data."registration.json" | fromjson | .repository)|\(.data."registration.json" | fromjson | .branch // "main")|\(.data."registration.json" | fromjson | .name)"' | \
          while IFS='|' read -r configmap_name repository branch name; do
            if [ -n "$repository" ] && [ -n "$name" ]; then
              target_path="/srv/sketches/$name"
              echo "Syncing $name from $repository ($branch) to $target_path"
              
              # Remove existing directory
              rm -rf "$target_path"
              
              # Clone repository
              git clone --depth 1 --branch "$branch" "$repository" "$target_path" || {
                echo "Failed to clone $repository"
                continue
              }
              
              cd "$target_path"
              rm -rf .git
              
              # Set ownership for nginx
              chown -R 101:101 "$target_path"
              
              # Verify required files
              if [ ! -f "index.html" ] || [ ! -f "sketch.js" ]; then
                echo "WARNING: Required files missing in $name!"
              else
                echo "Successfully synced $name"
              fi
            fi
          done
          
          # Generate gallery index.html
          echo "Generating gallery index page..."
          cat > /srv/sketches/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>P5.js Sketches Gallery</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: #1a1a1a;
            color: #e0e0e0;
        }
        h1 {
            text-align: center;
            color: #ff6b6b;
            margin-bottom: 3rem;
        }
        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
        }
        .sketch-card {
            background: #2a2a2a;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .sketch-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.4);
        }
        .sketch-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #4ecdc4;
        }
        .sketch-link {
            display: inline-block;
            background: #ff6b6b;
            color: white;
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: 500;
            transition: background 0.2s ease;
        }
        .sketch-link:hover {
            background: #ff5252;
        }
        .no-sketches {
            text-align: center;
            color: #888;
            font-style: italic;
        }
        .footer {
            text-align: center;
            margin-top: 3rem;
            padding-top: 2rem;
            border-top: 1px solid #333;
            color: #666;
        }
    </style>
</head>
<body>
    <h1>ðŸŽ¨ P5.js Sketches Gallery</h1>
    <div class="gallery" id="gallery">
EOF
          
          # Add sketch cards to the gallery
          sketch_count=0
          for sketch_dir in /srv/sketches/*/; do
            if [ -d "$sketch_dir" ]; then
              sketch_name=$(basename "$sketch_dir")
              if [ "$sketch_name" != "lost+found" ] && [ -f "$sketch_dir/index.html" ]; then
                sketch_count=$((sketch_count + 1))
                cat >> /srv/sketches/index.html << EOF
        <div class="sketch-card">
            <div class="sketch-title">$sketch_name</div>
            <a href="/$sketch_name/" class="sketch-link">View Sketch</a>
        </div>
EOF
              fi
            fi
          done
          
          # Close the gallery and add footer
          if [ $sketch_count -eq 0 ]; then
            cat >> /srv/sketches/index.html << 'EOF'
        <div class="no-sketches">
            No sketches available yet. Deploy some sketch repositories to see them here!
        </div>
EOF
          fi
          
          cat >> /srv/sketches/index.html << 'EOF'
    </div>
    <div class="footer">
        <p>Powered by Goldentooth Kubernetes Cluster</p>
    </div>
</body>
</html>
EOF
          
          # Set ownership for nginx
          chown 101:101 /srv/sketches/index.html
          
          echo "Gallery generated with $sketch_count sketches"
          echo "Sketch sync completed"
        resources:
          limits:
            memory: "256Mi"
            cpu: "500m"
          requests:
            memory: "128Mi"
            cpu: "250m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ALL]
        volumeMounts:
        - name: sketches-storage
          mountPath: /srv/sketches
      
      containers:
      # Main nginx server
      - name: nginx
        image: {{ .Values.spec.server.image }}
        ports:
        - containerPort: 8080
          name: http
        resources:
          limits:
            memory: {{ .Values.spec.server.resources.limits.memory }}
            cpu: {{ .Values.spec.server.resources.limits.cpu }}
          requests:
            memory: {{ .Values.spec.server.resources.requests.memory }}
            cpu: {{ .Values.spec.server.resources.requests.cpu }}
        securityContext:
          allowPrivilegeEscalation: {{ .Values.spec.security.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: {{ .Values.spec.security.readOnlyRootFilesystem }}
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: sketches-storage
          mountPath: /srv/sketches
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: nginx-tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: sketches-storage
        persistentVolumeClaim:
          claimName: sketches-storage
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-tmp
        emptyDir: {}