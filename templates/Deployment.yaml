apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.spec.releaseName }}
  namespace: {{ .Values.spec.namespace }}
  labels:
    app: {{ .Values.spec.releaseName }}
spec:
  replicas: {{ .Values.spec.server.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.spec.releaseName }}
  template:
    metadata:
      labels:
        app: {{ .Values.spec.releaseName }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ .Values.spec.releaseName }}
              topologyKey: kubernetes.io/hostname
      serviceAccountName: {{ .Values.spec.releaseName }}-controller
      securityContext:
        runAsNonRoot: {{ .Values.spec.security.runAsNonRoot }}
        runAsUser: {{ .Values.spec.security.runAsUser }}
        runAsGroup: {{ .Values.spec.security.runAsGroup }}
      initContainers:
      # Gallery generator - creates index.html from available sketches
      - name: gallery-generator
        image: alpine:3.19
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Generating gallery index page..."
          
          # Create gallery template
          cat > /tmp/gallery-template.html << 'EOF'
{{ .Files.Get "gallery-template.html" }}
          EOF
          
          # Build sketch cards HTML from shared storage
          sketch_cards=""
          sketch_count=0
          
          if [ -d "/shared/sketches" ]; then
            for sketch_dir in /shared/sketches/*/; do
              if [ -d "$sketch_dir" ]; then
                sketch_name=$(basename "$sketch_dir")
                if [ "$sketch_name" != "lost+found" ] && [ -f "$sketch_dir/index.html" ]; then
                  sketch_count=$((sketch_count + 1))
                  
                  # Check for preview images
                  preview_content=""
                  if [ -f "$sketch_dir/preview.png" ]; then
                    if [ -f "$sketch_dir/preview.gif" ]; then
                      preview_content="<div class=\"sketch-preview\"><img src=\"/$sketch_name/preview.png\" alt=\"$sketch_name preview\" class=\"preview-png\"><img src=\"/$sketch_name/preview.gif\" alt=\"$sketch_name animation\" class=\"preview-gif\"></div>"
                    else
                      preview_content="<div class=\"sketch-preview\"><img src=\"/$sketch_name/preview.png\" alt=\"$sketch_name preview\"></div>"
                    fi
                  elif [ -f "$sketch_dir/preview.gif" ]; then
                    preview_content="<div class=\"sketch-preview\"><img src=\"/$sketch_name/preview.gif\" alt=\"$sketch_name animation\"></div>"
                  else
                    first_char=$(echo "$sketch_name" | cut -c1 | tr '[:lower:]' '[:upper:]')
                    preview_content="<div class=\"sketch-preview\"><div class=\"preview-placeholder\">$first_char</div></div>"
                  fi
                  
                  sketch_cards="$sketch_cards<div class=\"sketch-card\">$preview_content<div class=\"sketch-content\"><div class=\"sketch-title\">$sketch_name</div><a href=\"/$sketch_name/\" class=\"sketch-link\">View Sketch</a></div></div>"
                fi
              fi
            done
          fi
          
          # If no sketches, show message
          if [ $sketch_count -eq 0 ]; then
            sketch_cards='<div class="no-sketches">No sketches available yet. Deploy some sketch repositories to see them here!</div>'
          fi
          
          # Replace placeholder and generate final HTML
          sed "s|{{SKETCH_CARDS}}|$sketch_cards|g" /tmp/gallery-template.html > /shared/sketches/index.html
          
          echo "Gallery generated with $sketch_count sketches"
        securityContext:
          allowPrivilegeEscalation: {{ .Values.spec.security.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: false
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: sketches-storage
          mountPath: /shared/sketches
      containers:
      - name: nginx
        image: {{ .Values.spec.server.image }}
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        securityContext:
          allowPrivilegeEscalation: {{ .Values.spec.security.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: {{ .Values.spec.security.readOnlyRootFilesystem }}
        volumeMounts:
        - name: sketches-storage
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: tls-cert
          mountPath: /etc/ssl/certs/tls.crt
          subPath: tls.crt
          readOnly: true
        - name: tls-cert
          mountPath: /etc/ssl/private/tls.key
          subPath: tls.key
          readOnly: true
        resources:
          requests:
            memory: {{ .Values.spec.server.resources.requests.memory }}
            cpu: {{ .Values.spec.server.resources.requests.cpu }}
          limits:
            memory: {{ .Values.spec.server.resources.limits.memory }}
            cpu: {{ .Values.spec.server.resources.limits.cpu }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: sketches-storage
        persistentVolumeClaim:
          claimName: sketches-shared-storage
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: tls-cert
        secret:
          secretName: {{ .Values.spec.releaseName }}-tls-dns01-secret