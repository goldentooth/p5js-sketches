apiVersion: apps/v1
kind: Deployment
metadata:
  name: p5js-sketches
  namespace: {{ .Values.spec.namespace }}
  labels:
    app: p5js-sketches
spec:
  replicas: {{ .Values.spec.server.replicas }}
  selector:
    matchLabels:
      app: p5js-sketches
  template:
    metadata:
      labels:
        app: p5js-sketches
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/health"
    spec:
      serviceAccountName: p5js-sketches-controller
      securityContext:
        runAsNonRoot: {{ .Values.spec.security.runAsNonRoot }}
        runAsUser: {{ .Values.spec.security.runAsUser }}
        runAsGroup: {{ .Values.spec.security.runAsGroup }}
        fsGroup: {{ .Values.spec.security.runAsGroup }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - p5js-sketches
              topologyKey: kubernetes.io/hostname
      containers:
      # Sketch sync controller - watches ConfigMaps and creates sync jobs
      - name: sketch-controller
        image: alpine/k8s:latest
        command:
        - /bin/sh
        - -c
        - |
          apk add --no-cache curl jq git
          echo "Starting p5js-sketches controller..."
          
          while true; do
            echo "$(date): Checking for new sketch registrations..."
            
            # Get all registration ConfigMaps
            kubectl get configmaps -n {{ .Values.spec.namespace }} \
              -l p5js-sketch/registration=true \
              -o json | jq -r '.items[] | 
                select(.metadata.annotations."p5js-sketch/sync-status" != "completed") |
                "\(.metadata.name)|\(.data."registration.json" | fromjson | .repository)|\(.data."registration.json" | fromjson | .branch)|\(.data."registration.json" | fromjson | .name)|\(.data."registration.json" | fromjson | .targetPath)"' | \
            while IFS='|' read -r configmap_name repo_url branch sketch_name target_path; do
              if [ -n "$configmap_name" ]; then
                echo "Processing sketch: $sketch_name (ConfigMap: $configmap_name)"
                
                # Create sync job for this sketch
                cat << EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: sync-${sketch_name}-$(date +%s)
            namespace: {{ .Values.spec.namespace }}
            labels:
              p5js-sketch/name: "${sketch_name}"
              p5js-sketch/component: sync
              created-by: sketch-controller
          spec:
            template:
              spec:
                restartPolicy: OnFailure
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 1000
                  runAsGroup: 1000
                  fsGroup: 1000
                containers:
                - name: git-sync
                  image: alpine/git:latest
                  command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "Syncing sketch: ${sketch_name}"
                    echo "Repository: ${repo_url}"
                    echo "Target: ${target_path}"
                    
                    # Remove existing directory
                    if [ -d "${target_path}" ]; then
                      rm -rf "${target_path}"
                    fi
                    
                    # Clone repository
                    git clone --depth 1 --branch ${branch} "${repo_url}" "${target_path}"
                    cd "${target_path}"
                    rm -rf .git
                    
                    # Set ownership for nginx
                    chown -R 101:101 "${target_path}"
                    
                    # Verify required files
                    if [ ! -f "index.html" ] || [ ! -f "sketch.js" ]; then
                      echo "ERROR: Required files missing!"
                      exit 1
                    fi
                    
                    echo "Sync completed successfully!"
                  resources:
                    limits:
                      memory: "128Mi"
                      cpu: "200m"
                    requests:
                      memory: "64Mi"
                      cpu: "100m"
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: [ALL]
                  volumeMounts:
                  - name: sketches-storage
                    mountPath: /srv/sketches
                volumes:
                - name: sketches-storage
                  persistentVolumeClaim:
                    claimName: sketches-storage
            backoffLimit: 3
            activeDeadlineSeconds: 300
          EOF
                
                # Mark ConfigMap as processed
                kubectl annotate configmap "$configmap_name" -n {{ .Values.spec.namespace }} \
                  p5js-sketch/sync-status=processing \
                  p5js-sketch/sync-job="sync-${sketch_name}-$(date +%s)" \
                  --overwrite
                
                echo "Created sync job for $sketch_name"
              fi
            done
            
            # Check for completed jobs and update ConfigMaps
            kubectl get jobs -n {{ .Values.spec.namespace }} \
              -l p5js-sketch/component=sync \
              -o json | jq -r '.items[] | 
                select(.status.succeeded == 1) |
                "\(.metadata.labels."p5js-sketch/name")|\(.metadata.name)"' | \
            while IFS='|' read -r sketch_name job_name; do
              if [ -n "$sketch_name" ]; then
                kubectl annotate configmap "sketch-$sketch_name" -n {{ .Values.spec.namespace }} \
                  p5js-sketch/sync-status=completed \
                  p5js-sketch/completed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                  --overwrite
                echo "Marked $sketch_name as completed"
                
                # Clean up old sync jobs
                kubectl delete job "$job_name" -n {{ .Values.spec.namespace }}
              fi
            done
            
            echo "Controller cycle completed, sleeping 30s..."
            sleep 30
          done
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ALL]
        volumeMounts:
        - name: sketches-storage
          mountPath: /srv/sketches
      
      # Main nginx server
      - name: nginx
        image: {{ .Values.spec.server.image }}
        ports:
        - containerPort: 8080
          name: http
        resources:
          limits:
            memory: {{ .Values.spec.server.resources.limits.memory }}
            cpu: {{ .Values.spec.server.resources.limits.cpu }}
          requests:
            memory: {{ .Values.spec.server.resources.requests.memory }}
            cpu: {{ .Values.spec.server.resources.requests.cpu }}
        securityContext:
          allowPrivilegeEscalation: {{ .Values.spec.security.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: {{ .Values.spec.security.readOnlyRootFilesystem }}
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: sketches-storage
          mountPath: /srv/sketches
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: nginx-tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: sketches-storage
        persistentVolumeClaim:
          claimName: sketches-storage
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-tmp
        emptyDir: {}